[{"categories":["编码语言"],"content":"C语言实现银行管理系统","date":"2024-04-11","objectID":"/2024/04/bank-manage-system-by-c/","tags":["C语言","系统"],"title":"银行管理系统实例(C语言版）","uri":"/2024/04/bank-manage-system-by-c/"},{"categories":["编码语言"],"content":" 在上小学期的时间里，用C语言简单的写了一个银行的管理系统实例，整体上还是显得有些粗糙。但是对于初学者来说，可以作为一些参考。程序的编写环境是VS2013，为了能让学校运行，所以在DEVC++中进行了测试。由于在编写的时候在循环体中加入了局部变量，所以在VC++中是不能被编译的，如果有需要的同学可以自行修改。 ","date":"2024-04-11","objectID":"/2024/04/bank-manage-system-by-c/:0:0","tags":["C语言","系统"],"title":"银行管理系统实例(C语言版）","uri":"/2024/04/bank-manage-system-by-c/"},{"categories":["编码语言"],"content":"应用代码 1/全局头文件(banksystem.h) /* **banksystem文件头 **ASorb time:201807 */ #include\u003cstdio.h\u003e #include\u003cstdlib.h\u003e #include\u003cstring.h\u003e #include\u003ctime.h\u003e //基本常量 #define user_max 99 //用户最大数 #define take_notes_max 20 //记录数 #define data_file \"bankdata.orb\" //数据文件默认地址 #define user_size sizeof(user) //结构体变量 struct take_notes{ char handle[10]; //操作 float money; //操作的钱数 struct tm T; //时间结构体 }; typedef struct{ char name[25]; //用户名 unsigned int card; //银行卡号 char pass[8]; //密码 float balance; //余额 struct take_notes list[take_notes_max]; }user; //宏 2/入口文件（main.cpp） /* **功能实现：银行系统实例 **开发环境：VS2013 **ASorb time:201807 **默认管理名：asorb 号：18072801 密码：123456 **测试环境：DEVC++5.10 （修改：1/结构体不能直接赋值，分成员赋值） */ //主函数 #include\"banksystem.h\" int main(){ void file_true(); void face(); char face_1(); void face_2(); void add_user(); user* login(); face(); //初始化窗口 file_true(); char h1; while ((h1 = face_1()) != 'Q') { if (h1 == 'A'){ if (login()-\u003ename[0] != NULL){ system(\"cls\"); face_2(); } } else if (h1 == 'B') add_user(); } return 0; } 3/功能函数文件（function.cpp） /* **功能函数 **ASorb time:201807 */ #include\"banksystem.h\" //添加新用户 void add_user(){ int user_num(); void file_read(user*); void file_save(user*, int); user p = { NULL }; char y = NULL; printf(\"\\n\\n注册用户\\n\"); printf(\"--------------\\n你的姓名（20字符内）：\"); fflush(stdin); gets(p.name); printf(\"你的密码（6个字符）：\"); fflush(stdin); gets(p.pass); if (strlen(p.name) == 0 || strlen(p.name) \u003e 20){ printf(\"ERROR224：姓名格式错误！\\n\"); y = 'N'; } if (strlen(p.pass) != 6){ printf(\"ERROR224：密码格式错误！\\n\"); y = 'N'; } if (y == NULL){ user list[user_max] = { NULL }; file_read(list); for (int i = user_num() - 1; i \u003e= 0; i--) if (strcmp(list[i].name, p.name) == 0){ printf(\"------------------\\n\"); printf(\"提示：系统检测到存在相同的用户名，继续注册将添加新的卡号！\\n\"); printf(\"\\tY.继续\\t回车键放弃\\n\"); printf(\"键入选择：\"); fflush(stdin); y = getchar(); } if (y == 'Y' || y == NULL){ (p.card) = ((list + (user_num() - 1))-\u003ecard + 1); //新银行卡号 p.balance = 0; list[user_num()] = p; //加入用户 file_save(list, user_num() + 1); system(\"cls\"); printf(\"提示：注册成功！\\n\\t用户名：%s\\t卡号:%d\", p.name, p.card); } else{ system(\"cls\"); printf(\"提示：用户放弃注册！\"); } } else{ printf(\"\\n提示：注册失败！回车键返回...\\n\"); fflush(stdin); getchar(); system(\"cls\"); } } //用户登录 user* login(){ static user p = { NULL }; int user_num(); void file_read(user*); user list[user_max] = { NULL }; file_read(list); if (p.name[0] == NULL){ printf(\"--------------------\\n\"); printf(\"输入卡号：\"); fflush(stdin); scanf(\"%d\", \u0026p.card); printf(\"输入密码：\"); fflush(stdin); gets(p.pass); for (int i = user_num() - 1; i \u003e= 0; i--){ if (list[i].card == p.card){ if (strcmp(list[i].pass, p.pass) == 0) p = list[i]; else{ p.name[0] = NULL; printf(\"提示：密码错误！回车键返回.....\\n\"); fflush(stdin); getchar(); system(\"cls\"); } break; } else if (i == 0){ p.name[0] = NULL; printf(\"提示：卡号不存在！回车键返回......\\n\"); fflush(stdin); getchar(); system(\"cls\"); } } } else{ for (int i = user_num(); i \u003e= 0; i--) if (list[i].card == p.card){ p = list[i]; break; } } return \u0026p; } //余额查询 void balance_num(){ user* login(); user *p = login(); void handle_save(struct tm*,float,char arr[]); struct tm* time_now(); static int num_1 = 1; struct tm *t = time_now(); printf(\"余额查询-银行系统实例\\n\\n\\n\\n\"); printf(\"\\t┌────────────────┬────────────────┬──────────────────┐\\n\"); printf(\"\\t│姓名：%-10s│卡号：%-10d│余额：%10.2f元│\\n\", p-\u003ename, p-\u003ecard, p-\u003ebalance); printf(\"\\t└────────────────┴────────────────┴──────────────────┘\\n\"); handle_save(t, 0,\"balance\"); //保存记录 printf(\"\\n\\t$$当前时间：%d-%d-%d %d:%d:%d 已记录\", 1900+t-\u003etm_year, 1+t-\u003etm_mon,t-\u003etm_mday,8+t-\u003etm_hour,t-\u003etm_min,t-\u003etm_sec); printf(\"\\n\\nY.刷新\\t回车键返回.....\\n\"); printf(\"----------------\\n键入选择：\"); fflush(stdin); if (getchar() == 'Y'){ system(\"cls\"); printf(\"第 %d 次刷新成功！\\t\",num_1++); balance_num(); } else system(\"cls\"); } //取款 void draw(){ void file_read(user*); void file_save(user*,int); void handle_save(struct tm*, float, char arr[]); struct tm* time_now(); struct tm *t = time_now(); int user_num(); int num_2 = 0; float money; user* login(); user *p = login(); user list[user_max] = { NULL }; printf(\"\\n--------------","date":"2024-04-11","objectID":"/2024/04/bank-manage-system-by-c/:1:0","tags":["C语言","系统"],"title":"银行管理系统实例(C语言版）","uri":"/2024/04/bank-manage-system-by-c/"},{"categories":["编码语言"],"content":"效果图 ","date":"2024-04-11","objectID":"/2024/04/bank-manage-system-by-c/:2:0","tags":["C语言","系统"],"title":"银行管理系统实例(C语言版）","uri":"/2024/04/bank-manage-system-by-c/"},{"categories":["编码语言"],"content":"下载地址 DEVC++下测试工程文件（源代码）：https://download.csdn.net/download/qq_42304721/10592413 ","date":"2024-04-11","objectID":"/2024/04/bank-manage-system-by-c/:3:0","tags":["C语言","系统"],"title":"银行管理系统实例(C语言版）","uri":"/2024/04/bank-manage-system-by-c/"},{"categories":null,"content":"关于 LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt 是一个由  Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveIt ","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特性 ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 Plausible Analytics  支持 Yandex Metrica  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 ","date":"2019-08-02","objectID":"/about/:1:1","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"外观和布局  桌面端/移动端 响应式布局  浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 73 种社交链接  支持多达 24 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook comments 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 utterances 评论系统  支持 giscus 评论系统 ","date":"2019-08-02","objectID":"/about/:1:2","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightGallery 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $\\KaTeX$ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅  支持人物标签的 shortcode … ","date":"2019-08-02","objectID":"/about/:1:3","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特别感谢 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"关于 LoveIt","uri":"/about/"}]